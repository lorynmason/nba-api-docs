// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Main should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Main
    activePage="overview"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2>
          OVERVIEW
        </h2>,
        <p>
          The Fantasy Basketball API is an open-source project designed to provide developers with information on the best players from each team to help fantasy basketball enthusiasts find the best information possible. It allow users to get the top 3 scorers from each NBA team to aid in decisions on which fantasy players they would like to select. The API also stores relevant team data to thoroughly understand the stats of the players team in relation to their stats.
        </p>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "OVERVIEW",
        },
        "ref": null,
        "rendered": "OVERVIEW",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "The Fantasy Basketball API is an open-source project designed to provide developers with information on the best players from each team to help fantasy basketball enthusiasts find the best information possible. It allow users to get the top 3 scorers from each NBA team to aid in decisions on which fantasy players they would like to select. The API also stores relevant team data to thoroughly understand the stats of the players team in relation to their stats.",
        },
        "ref": null,
        "rendered": "The Fantasy Basketball API is an open-source project designed to provide developers with information on the best players from each team to help fantasy basketball enthusiasts find the best information possible. It allow users to get the top 3 scorers from each NBA team to aid in decisions on which fantasy players they would like to select. The API also stores relevant team data to thoroughly understand the stats of the players team in relation to their stats.",
        "type": "p",
      },
    ],
    "type": "main",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            OVERVIEW
          </h2>,
          <p>
            The Fantasy Basketball API is an open-source project designed to provide developers with information on the best players from each team to help fantasy basketball enthusiasts find the best information possible. It allow users to get the top 3 scorers from each NBA team to aid in decisions on which fantasy players they would like to select. The API also stores relevant team data to thoroughly understand the stats of the players team in relation to their stats.
          </p>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "OVERVIEW",
          },
          "ref": null,
          "rendered": "OVERVIEW",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "The Fantasy Basketball API is an open-source project designed to provide developers with information on the best players from each team to help fantasy basketball enthusiasts find the best information possible. It allow users to get the top 3 scorers from each NBA team to aid in decisions on which fantasy players they would like to select. The API also stores relevant team data to thoroughly understand the stats of the players team in relation to their stats.",
          },
          "ref": null,
          "rendered": "The Fantasy Basketball API is an open-source project designed to provide developers with information on the best players from each team to help fantasy basketball enthusiasts find the best information possible. It allow users to get the top 3 scorers from each NBA team to aid in decisions on which fantasy players they would like to select. The API also stores relevant team data to thoroughly understand the stats of the players team in relation to their stats.",
          "type": "p",
        },
      ],
      "type": "main",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Main should match the snapshot 2`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Main
    activePage="get"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2>
          GET all teams:
        </h2>,
        <h3>
          GET /api/v1/teams
        </h3>,
        <p>
          Receive an array of NBA teams with relevant stats.
        </p>,
        <p>
          Sample Response:
        </p>,
        <img
          src="../images/Screen Shot 2019-02-05 at 3.29.49 PM.png"
        />,
        <h2>
          GET all players:
        </h2>,
        <h3>
          GET /api/v1/players
        </h3>,
        <p>
          Receive an arry of the top 3 scoring leaders from each team with additional stats.
        </p>,
        <p>
          Sample Response:
        </p>,
        <img
          src="../images/Screen Shot 2019-02-05 at 3.30.12 PM.png"
        />,
        <h2>
          GET a single team:
        </h2>,
        <h3>
          GET /api/v1/teams/:id
        </h3>,
        <p>
          Receive a single team object with stats.
        </p>,
        <p>
          Sample Response:
        </p>,
        <img
          src="../images/Screen Shot 2019-02-05 at 3.30.27 PM.png"
        />,
        <h2>
          GET a single player:
        </h2>,
        <h3>
          GET /api/v1/players/:id
        </h3>,
        <p>
          Receive a single player object with all stats.
        </p>,
        <p>
          Sample Response:
        </p>,
        <img
          src="../images/Screen Shot 2019-02-05 at 3.30.40 PM.png"
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "GET all teams:",
        },
        "ref": null,
        "rendered": "GET all teams:",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "GET /api/v1/teams",
        },
        "ref": null,
        "rendered": "GET /api/v1/teams",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Receive an array of NBA teams with relevant stats.",
        },
        "ref": null,
        "rendered": "Receive an array of NBA teams with relevant stats.",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Sample Response:",
        },
        "ref": null,
        "rendered": "Sample Response:",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "src": "../images/Screen Shot 2019-02-05 at 3.29.49 PM.png",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "GET all players:",
        },
        "ref": null,
        "rendered": "GET all players:",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "GET /api/v1/players",
        },
        "ref": null,
        "rendered": "GET /api/v1/players",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Receive an arry of the top 3 scoring leaders from each team with additional stats.",
        },
        "ref": null,
        "rendered": "Receive an arry of the top 3 scoring leaders from each team with additional stats.",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Sample Response:",
        },
        "ref": null,
        "rendered": "Sample Response:",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "src": "../images/Screen Shot 2019-02-05 at 3.30.12 PM.png",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "GET a single team:",
        },
        "ref": null,
        "rendered": "GET a single team:",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "GET /api/v1/teams/:id",
        },
        "ref": null,
        "rendered": "GET /api/v1/teams/:id",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Receive a single team object with stats.",
        },
        "ref": null,
        "rendered": "Receive a single team object with stats.",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Sample Response:",
        },
        "ref": null,
        "rendered": "Sample Response:",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "src": "../images/Screen Shot 2019-02-05 at 3.30.27 PM.png",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "GET a single player:",
        },
        "ref": null,
        "rendered": "GET a single player:",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "GET /api/v1/players/:id",
        },
        "ref": null,
        "rendered": "GET /api/v1/players/:id",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Receive a single player object with all stats.",
        },
        "ref": null,
        "rendered": "Receive a single player object with all stats.",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Sample Response:",
        },
        "ref": null,
        "rendered": "Sample Response:",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "src": "../images/Screen Shot 2019-02-05 at 3.30.40 PM.png",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            GET all teams:
          </h2>,
          <h3>
            GET /api/v1/teams
          </h3>,
          <p>
            Receive an array of NBA teams with relevant stats.
          </p>,
          <p>
            Sample Response:
          </p>,
          <img
            src="../images/Screen Shot 2019-02-05 at 3.29.49 PM.png"
          />,
          <h2>
            GET all players:
          </h2>,
          <h3>
            GET /api/v1/players
          </h3>,
          <p>
            Receive an arry of the top 3 scoring leaders from each team with additional stats.
          </p>,
          <p>
            Sample Response:
          </p>,
          <img
            src="../images/Screen Shot 2019-02-05 at 3.30.12 PM.png"
          />,
          <h2>
            GET a single team:
          </h2>,
          <h3>
            GET /api/v1/teams/:id
          </h3>,
          <p>
            Receive a single team object with stats.
          </p>,
          <p>
            Sample Response:
          </p>,
          <img
            src="../images/Screen Shot 2019-02-05 at 3.30.27 PM.png"
          />,
          <h2>
            GET a single player:
          </h2>,
          <h3>
            GET /api/v1/players/:id
          </h3>,
          <p>
            Receive a single player object with all stats.
          </p>,
          <p>
            Sample Response:
          </p>,
          <img
            src="../images/Screen Shot 2019-02-05 at 3.30.40 PM.png"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "GET all teams:",
          },
          "ref": null,
          "rendered": "GET all teams:",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "GET /api/v1/teams",
          },
          "ref": null,
          "rendered": "GET /api/v1/teams",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Receive an array of NBA teams with relevant stats.",
          },
          "ref": null,
          "rendered": "Receive an array of NBA teams with relevant stats.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sample Response:",
          },
          "ref": null,
          "rendered": "Sample Response:",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "src": "../images/Screen Shot 2019-02-05 at 3.29.49 PM.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "GET all players:",
          },
          "ref": null,
          "rendered": "GET all players:",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "GET /api/v1/players",
          },
          "ref": null,
          "rendered": "GET /api/v1/players",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Receive an arry of the top 3 scoring leaders from each team with additional stats.",
          },
          "ref": null,
          "rendered": "Receive an arry of the top 3 scoring leaders from each team with additional stats.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sample Response:",
          },
          "ref": null,
          "rendered": "Sample Response:",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "src": "../images/Screen Shot 2019-02-05 at 3.30.12 PM.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "GET a single team:",
          },
          "ref": null,
          "rendered": "GET a single team:",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "GET /api/v1/teams/:id",
          },
          "ref": null,
          "rendered": "GET /api/v1/teams/:id",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Receive a single team object with stats.",
          },
          "ref": null,
          "rendered": "Receive a single team object with stats.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sample Response:",
          },
          "ref": null,
          "rendered": "Sample Response:",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "src": "../images/Screen Shot 2019-02-05 at 3.30.27 PM.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "GET a single player:",
          },
          "ref": null,
          "rendered": "GET a single player:",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "GET /api/v1/players/:id",
          },
          "ref": null,
          "rendered": "GET /api/v1/players/:id",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Receive a single player object with all stats.",
          },
          "ref": null,
          "rendered": "Receive a single player object with all stats.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sample Response:",
          },
          "ref": null,
          "rendered": "Sample Response:",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "src": "../images/Screen Shot 2019-02-05 at 3.30.40 PM.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Main should match the snapshot 3`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Main
    activePage="post"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2>
          POST a new team:
        </h2>,
        <h3>
          POST /api/v1/teams
        </h3>,
        <p>
          Request should include a complete team with all necessary properties.
        </p>,
        <p>
          Sample Request:
        </p>,
        <img
          src="../images/Screen Shot 2019-02-05 at 3.30.55 PM.png"
        />,
        <p>
          Receive the id of the new entry.
        </p>,
        <p>
          Sample response
        </p>,
        <img
          src="../images/Screen Shot 2019-02-05 at 3.31.16 PM.png"
        />,
        <h3>
          Post a new player:
        </h3>,
        <h2>
          POST /api/v1/players
        </h2>,
        <p>
          Request should include a complete player object with all necessary properties.
        </p>,
        <p>
          Sample Request:
        </p>,
        <img
          src="../images/Screen Shot 2019-02-05 at 3.31.28 PM.png"
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "POST a new team:",
        },
        "ref": null,
        "rendered": "POST a new team:",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "POST /api/v1/teams",
        },
        "ref": null,
        "rendered": "POST /api/v1/teams",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Request should include a complete team with all necessary properties.",
        },
        "ref": null,
        "rendered": "Request should include a complete team with all necessary properties.",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Sample Request:",
        },
        "ref": null,
        "rendered": "Sample Request:",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "src": "../images/Screen Shot 2019-02-05 at 3.30.55 PM.png",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Receive the id of the new entry.",
        },
        "ref": null,
        "rendered": "Receive the id of the new entry.",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Sample response",
        },
        "ref": null,
        "rendered": "Sample response",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "src": "../images/Screen Shot 2019-02-05 at 3.31.16 PM.png",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Post a new player:",
        },
        "ref": null,
        "rendered": "Post a new player:",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "POST /api/v1/players",
        },
        "ref": null,
        "rendered": "POST /api/v1/players",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Request should include a complete player object with all necessary properties.",
        },
        "ref": null,
        "rendered": "Request should include a complete player object with all necessary properties.",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Sample Request:",
        },
        "ref": null,
        "rendered": "Sample Request:",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "src": "../images/Screen Shot 2019-02-05 at 3.31.28 PM.png",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            POST a new team:
          </h2>,
          <h3>
            POST /api/v1/teams
          </h3>,
          <p>
            Request should include a complete team with all necessary properties.
          </p>,
          <p>
            Sample Request:
          </p>,
          <img
            src="../images/Screen Shot 2019-02-05 at 3.30.55 PM.png"
          />,
          <p>
            Receive the id of the new entry.
          </p>,
          <p>
            Sample response
          </p>,
          <img
            src="../images/Screen Shot 2019-02-05 at 3.31.16 PM.png"
          />,
          <h3>
            Post a new player:
          </h3>,
          <h2>
            POST /api/v1/players
          </h2>,
          <p>
            Request should include a complete player object with all necessary properties.
          </p>,
          <p>
            Sample Request:
          </p>,
          <img
            src="../images/Screen Shot 2019-02-05 at 3.31.28 PM.png"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "POST a new team:",
          },
          "ref": null,
          "rendered": "POST a new team:",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "POST /api/v1/teams",
          },
          "ref": null,
          "rendered": "POST /api/v1/teams",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Request should include a complete team with all necessary properties.",
          },
          "ref": null,
          "rendered": "Request should include a complete team with all necessary properties.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sample Request:",
          },
          "ref": null,
          "rendered": "Sample Request:",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "src": "../images/Screen Shot 2019-02-05 at 3.30.55 PM.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Receive the id of the new entry.",
          },
          "ref": null,
          "rendered": "Receive the id of the new entry.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sample response",
          },
          "ref": null,
          "rendered": "Sample response",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "src": "../images/Screen Shot 2019-02-05 at 3.31.16 PM.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Post a new player:",
          },
          "ref": null,
          "rendered": "Post a new player:",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "POST /api/v1/players",
          },
          "ref": null,
          "rendered": "POST /api/v1/players",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Request should include a complete player object with all necessary properties.",
          },
          "ref": null,
          "rendered": "Request should include a complete player object with all necessary properties.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sample Request:",
          },
          "ref": null,
          "rendered": "Sample Request:",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "src": "../images/Screen Shot 2019-02-05 at 3.31.28 PM.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Main should match the snapshot 4`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Main
    activePage="patch"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3>
          PATCH an existing team:
        </h3>,
        <h2>
          PATCH /api/v1/teams/:id
        </h2>,
        <p>
          Request should include any key/value pairs that are to be changed in the database.
        </p>,
        <p>
          Sample request body:
        </p>,
        <img
          src="../images/Screen Shot 2019-02-05 at 3.31.43 PM.png"
        />,
        <p>
          Receive the id of the record that was updated and a confirmation message.
        </p>,
        <p>
          Sample response:
        </p>,
        <img
          src="../images/Screen Shot 2019-02-05 at 3.50.15 PM.png"
        />,
        <h3>
          PATCH an existing player:
        </h3>,
        <h2>
          PATCH /api/v1/players/:id
        </h2>,
        <p>
          Request should include any key/value pairs that are to be changed on the database.
        </p>,
        <p>
          Sample request body:
        </p>,
        <img
          src="../images/Screen Shot 2019-02-05 at 3.31.57 PM.png"
        />,
        <p>
          Receive the id of the record that was updated and a confirmation message
        </p>,
        <p>
          Sample response:
        </p>,
        <img
          src="../images/Screen Shot 2019-02-05 at 3.32.10 PM.png"
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "PATCH an existing team:",
        },
        "ref": null,
        "rendered": "PATCH an existing team:",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "PATCH /api/v1/teams/:id",
        },
        "ref": null,
        "rendered": "PATCH /api/v1/teams/:id",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Request should include any key/value pairs that are to be changed in the database.",
        },
        "ref": null,
        "rendered": "Request should include any key/value pairs that are to be changed in the database.",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Sample request body:",
        },
        "ref": null,
        "rendered": "Sample request body:",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "src": "../images/Screen Shot 2019-02-05 at 3.31.43 PM.png",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Receive the id of the record that was updated and a confirmation message.",
        },
        "ref": null,
        "rendered": "Receive the id of the record that was updated and a confirmation message.",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Sample response:",
        },
        "ref": null,
        "rendered": "Sample response:",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "src": "../images/Screen Shot 2019-02-05 at 3.50.15 PM.png",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "PATCH an existing player:",
        },
        "ref": null,
        "rendered": "PATCH an existing player:",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "PATCH /api/v1/players/:id",
        },
        "ref": null,
        "rendered": "PATCH /api/v1/players/:id",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Request should include any key/value pairs that are to be changed on the database.",
        },
        "ref": null,
        "rendered": "Request should include any key/value pairs that are to be changed on the database.",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Sample request body:",
        },
        "ref": null,
        "rendered": "Sample request body:",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "src": "../images/Screen Shot 2019-02-05 at 3.31.57 PM.png",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Receive the id of the record that was updated and a confirmation message",
        },
        "ref": null,
        "rendered": "Receive the id of the record that was updated and a confirmation message",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Sample response:",
        },
        "ref": null,
        "rendered": "Sample response:",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "src": "../images/Screen Shot 2019-02-05 at 3.32.10 PM.png",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3>
            PATCH an existing team:
          </h3>,
          <h2>
            PATCH /api/v1/teams/:id
          </h2>,
          <p>
            Request should include any key/value pairs that are to be changed in the database.
          </p>,
          <p>
            Sample request body:
          </p>,
          <img
            src="../images/Screen Shot 2019-02-05 at 3.31.43 PM.png"
          />,
          <p>
            Receive the id of the record that was updated and a confirmation message.
          </p>,
          <p>
            Sample response:
          </p>,
          <img
            src="../images/Screen Shot 2019-02-05 at 3.50.15 PM.png"
          />,
          <h3>
            PATCH an existing player:
          </h3>,
          <h2>
            PATCH /api/v1/players/:id
          </h2>,
          <p>
            Request should include any key/value pairs that are to be changed on the database.
          </p>,
          <p>
            Sample request body:
          </p>,
          <img
            src="../images/Screen Shot 2019-02-05 at 3.31.57 PM.png"
          />,
          <p>
            Receive the id of the record that was updated and a confirmation message
          </p>,
          <p>
            Sample response:
          </p>,
          <img
            src="../images/Screen Shot 2019-02-05 at 3.32.10 PM.png"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "PATCH an existing team:",
          },
          "ref": null,
          "rendered": "PATCH an existing team:",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "PATCH /api/v1/teams/:id",
          },
          "ref": null,
          "rendered": "PATCH /api/v1/teams/:id",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Request should include any key/value pairs that are to be changed in the database.",
          },
          "ref": null,
          "rendered": "Request should include any key/value pairs that are to be changed in the database.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sample request body:",
          },
          "ref": null,
          "rendered": "Sample request body:",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "src": "../images/Screen Shot 2019-02-05 at 3.31.43 PM.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Receive the id of the record that was updated and a confirmation message.",
          },
          "ref": null,
          "rendered": "Receive the id of the record that was updated and a confirmation message.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sample response:",
          },
          "ref": null,
          "rendered": "Sample response:",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "src": "../images/Screen Shot 2019-02-05 at 3.50.15 PM.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "PATCH an existing player:",
          },
          "ref": null,
          "rendered": "PATCH an existing player:",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "PATCH /api/v1/players/:id",
          },
          "ref": null,
          "rendered": "PATCH /api/v1/players/:id",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Request should include any key/value pairs that are to be changed on the database.",
          },
          "ref": null,
          "rendered": "Request should include any key/value pairs that are to be changed on the database.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sample request body:",
          },
          "ref": null,
          "rendered": "Sample request body:",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "src": "../images/Screen Shot 2019-02-05 at 3.31.57 PM.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Receive the id of the record that was updated and a confirmation message",
          },
          "ref": null,
          "rendered": "Receive the id of the record that was updated and a confirmation message",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sample response:",
          },
          "ref": null,
          "rendered": "Sample response:",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "src": "../images/Screen Shot 2019-02-05 at 3.32.10 PM.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Main should match the snapshot 5`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Main
    activePage="delete"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3>
          DELETE an existing team:
        </h3>,
        <h2>
          DELETE /api/v1/teams/:id
        </h2>,
        <p>
          Receive a confirmation message or the record that was deleted.
        </p>,
        <p>
          Sample response:
        </p>,
        <img
          src="../images/Screen Shot 2019-02-05 at 3.32.24 PM.png"
        />,
        <h3>
          DELETE an existing player:
        </h3>,
        <h2>
          DELETE /api/v1/players/:id
        </h2>,
        <p>
          Receive a confirmation message or the record that was deleted.
        </p>,
        <p>
          Sample response:
        </p>,
        <img
          src="../images/Screen Shot 2019-02-05 at 3.32.35 PM.png"
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "DELETE an existing team:",
        },
        "ref": null,
        "rendered": "DELETE an existing team:",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "DELETE /api/v1/teams/:id",
        },
        "ref": null,
        "rendered": "DELETE /api/v1/teams/:id",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Receive a confirmation message or the record that was deleted.",
        },
        "ref": null,
        "rendered": "Receive a confirmation message or the record that was deleted.",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Sample response:",
        },
        "ref": null,
        "rendered": "Sample response:",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "src": "../images/Screen Shot 2019-02-05 at 3.32.24 PM.png",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "DELETE an existing player:",
        },
        "ref": null,
        "rendered": "DELETE an existing player:",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "DELETE /api/v1/players/:id",
        },
        "ref": null,
        "rendered": "DELETE /api/v1/players/:id",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Receive a confirmation message or the record that was deleted.",
        },
        "ref": null,
        "rendered": "Receive a confirmation message or the record that was deleted.",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Sample response:",
        },
        "ref": null,
        "rendered": "Sample response:",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "src": "../images/Screen Shot 2019-02-05 at 3.32.35 PM.png",
        },
        "ref": null,
        "rendered": null,
        "type": "img",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3>
            DELETE an existing team:
          </h3>,
          <h2>
            DELETE /api/v1/teams/:id
          </h2>,
          <p>
            Receive a confirmation message or the record that was deleted.
          </p>,
          <p>
            Sample response:
          </p>,
          <img
            src="../images/Screen Shot 2019-02-05 at 3.32.24 PM.png"
          />,
          <h3>
            DELETE an existing player:
          </h3>,
          <h2>
            DELETE /api/v1/players/:id
          </h2>,
          <p>
            Receive a confirmation message or the record that was deleted.
          </p>,
          <p>
            Sample response:
          </p>,
          <img
            src="../images/Screen Shot 2019-02-05 at 3.32.35 PM.png"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "DELETE an existing team:",
          },
          "ref": null,
          "rendered": "DELETE an existing team:",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "DELETE /api/v1/teams/:id",
          },
          "ref": null,
          "rendered": "DELETE /api/v1/teams/:id",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Receive a confirmation message or the record that was deleted.",
          },
          "ref": null,
          "rendered": "Receive a confirmation message or the record that was deleted.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sample response:",
          },
          "ref": null,
          "rendered": "Sample response:",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "src": "../images/Screen Shot 2019-02-05 at 3.32.24 PM.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "DELETE an existing player:",
          },
          "ref": null,
          "rendered": "DELETE an existing player:",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "DELETE /api/v1/players/:id",
          },
          "ref": null,
          "rendered": "DELETE /api/v1/players/:id",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Receive a confirmation message or the record that was deleted.",
          },
          "ref": null,
          "rendered": "Receive a confirmation message or the record that was deleted.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sample response:",
          },
          "ref": null,
          "rendered": "Sample response:",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "src": "../images/Screen Shot 2019-02-05 at 3.32.35 PM.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
